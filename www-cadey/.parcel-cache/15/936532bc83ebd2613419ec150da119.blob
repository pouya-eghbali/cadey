var $f8725776afed81b2516d30e0671d1197$exports = {};
var $f8725776afed81b2516d30e0671d1197$var$patterns = {
  escaped: /^\\./i,
  keyword: /^:[a-z0-9.-]+/i,
  colon: /^:/,
  word: /^[^\[\] \n\r]+/,
  bracketLeft: /^\[/,
  bracketRight: /^\]/,
  newline: /^(\n|\n\r)/,
  spaces: / +/
};

var $f8725776afed81b2516d30e0671d1197$var$lexer = function lexer(string) {
  var tokens = [];
  var i = 0;

  while (i < string.length) {
    var matched = false;

    for (var name in $f8725776afed81b2516d30e0671d1197$var$patterns) {
      if ($f8725776afed81b2516d30e0671d1197$var$patterns.hasOwnProperty(name)) {
        var pattern = $f8725776afed81b2516d30e0671d1197$var$patterns[name];
        var match = string.slice(i).match(pattern);

        if (match != null) {
          tokens.push({
            name: name,
            index: i,
            raw: match[0]
          });
          i += match[0].length;
          matched = true;
          break;
        }
      }
    }

    if (!matched) throw new Error("Lexing error at ".concat(i));
  }

  tokens.push({
    name: "newline",
    index: string.length,
    raw: "\n"
  });
  tokens.push({
    name: "eof",
    index: string.length,
    raw: "eof"
  });
  return tokens;
};

var $f8725776afed81b2516d30e0671d1197$export$lexer = $f8725776afed81b2516d30e0671d1197$var$lexer;
$f8725776afed81b2516d30e0671d1197$exports.lexer = $f8725776afed81b2516d30e0671d1197$export$lexer;